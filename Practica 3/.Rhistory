dataLG$Acierto
roc_obj <- roc(roc_df$Grupo, roc_df$Acierto)
roc_df <- dataLG[-traindataset,]
roc_obj <- roc(roc_df$Grupo, roc_df$Acierto)
auc(roc_obj)
plot.roc(roc_obj, 0.7, 1, 2)
dev.off()
plot.roc(roc_obj, 0.7, 1, 2)
plot(1)
plot.roc(roc_obj, 0.7, 1, 2)
testdf <- dataLG[-traindataset,]
roc_obj <- roc(testdf$Grupo, testdf$Acierto)
auc(roc_obj)
roc_df <- data.frame(
TPR = rev(roc_obj$sensitivities),
FPR = rev(1 - roc_obj$specificities),
labels = roc_obj$response,
scores = roc_obj$predictor)
#Ejercicio 2.6
library(pROC)
str(dataex2)
testdf <- dataLG[-traindataset,]
roc_obj <- roc(testdf$Grupo, testdf$Acierto)
auc(roc_obj)
roc_df <- data.frame(
TPR = rev(roc_obj$sensitivities),
FPR = rev(1 - roc_obj$specificities),
labels = roc_obj$response,
scores = roc_obj$predictor)
cat()
fdasd
plot(roc_obj, ylab = "Sensitivity", xlab = "1-Specificity", models, type = "l", shadow = FALSE, simu = FALSE, control, grid = FALSE, diag = TRUE, box = FALSE, lwd = 2, lty, col, add = FALSE, axes = TRUE, legend, auc, percent = TRUE, ...)
plot(roc_obj, ylab = "Sensitivity", xlab = "1-Specificity", type = "l", shadow = FALSE, simu = FALSE, control = FALSE, grid = FALSE, diag = TRUE, box = FALSE, lwd = 2, lty, add = FALSE, axes = TRUE, legend = FALSE, auc = FALSE, percent = TRUE, ...)
plot(roc_obj, ylab = "Sensitivity", xlab = "1-Specificity", type = "l", shadow = FALSE, simu = FALSE, control = FALSE, grid = FALSE, diag = TRUE, box = FALSE, lwd = 2, lty, add = FALSE, axes = TRUE, legend = FALSE, auc = FALSE, percent = TRUE)
plot(roc_obj, ylab = "Sensitivity", xlab = "1-Specificity", type = "l", shadow = FALSE, simu = FALSE, control = FALSE, grid = FALSE, diag = TRUE, box = FALSE, lwd = 2, add = FALSE, axes = TRUE, legend = FALSE, auc = FALSE, percent = TRUE)
plot(roc_obj, ylab = "Sensitivity", xlab = "1-Specificity", type = "l", shadow = FALSE, simu = FALSE, control = FALSE, grid = FALSE, diag = TRUE, box = FALSE, lwd = 2, add = FALSE, axes = TRUE, legend = FALSE, percent = TRUE)
plot(roc_obj, ylab = "Sensitivity", xlab = "1-Specificity", type = "l", shadow = FALSE, simu = FALSE, control = FALSE, grid = FALSE, diag = TRUE, box = FALSE, lwd = 2, add = FALSE, axes = TRUE, legend = FALSE, percent = TRUE)
plot(1)
plot(roc_obj, ylab = "Sensitivity", xlab = "1-Specificity", type = "l", shadow = FALSE, simu = FALSE, control = FALSE, grid = FALSE, diag = TRUE, box = FALSE, lwd = 2, add = FALSE, axes = TRUE, legend = FALSE, percent = TRUE)
plot.roc(roc_obj)
warnings()
waplot(1)
roc_df
library(pROC)
str(dataex2)
testdf <- dataLG[-traindataset,]
roc_obj <- roc(testdf$Grupo, testdf$Acierto)
auc(roc_obj)
plot.roc(roc_obj)
mydata <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
mylogit <- glm(admit ~ gre, data = mydata, family = "binomial")
summary(mylogit)
mydata <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
str(mydata)
View(mydata)
mydata <- read.csv2("http://www.ats.ucla.edu/stat/data/binary.csv")
str(mydata)
#Para dibujar la curva ROC tomo el dataset test sobre el que hemos construido las matrices de confusion previamente.
print("HOLA")
source('practica1script.R')
library(caret)
library(rmarkdown)
#Crear un modelo de RLM para predecir la puntuación de la felicidad (HS) a partir de:
# - Indicador de renta per cápita (GpC)
# - Esperanza de vida en salud (LE)
# - Corrupción (GC)
head(mydata)
HS_PredictorModel_3p <- lm(HS ~ GpC + LE + GC, mydata)
summary(HS_PredictorModel_3p)
varImp(HS_PredictorModel_3p, scale = FALSE)
layout(matrix(c(1,1,2,3),2,2,byrow=T))
#Spend x Residuals Plot
plot(HS_PredictorModel_3p$resid~mydata$HS[order(mydata$HS)],
main="HS x Residuals\nfor Multiple Regression with 3 predictors",
xlab="HS", ylab= "Residuals")
abline(h=0,lty=2)
#Histogram of Residuals
hist(HS_PredictorModel_3p$resid, main = "Histogram of Residuals", ylab = "Residuals")
#Q-Q Plot
qqnorm(HS_PredictorModel_3p$resid)
qqline(HS_PredictorModel_3p$resid)
levels(mydata_ej2$Region) <- relevel(mydata_ej2$Region, ref = "WESTERN EUROPE")
HS_PredictorModel_4p <- lm(HS ~ Region + GpC + LE + GC, mydata)
summary(HS_PredictorModel_4p)
varImp(HS_PredictorModel_4p, scale = FALSE)
layout(matrix(c(1,1,2,3),2,2,byrow=T))
#Spend x Residuals Plot
plot(HS_PredictorModel_4p$resid~mydata$HS[order(mydata$HS)],
main="HS x Residuals\nfor Multiple Regression with",
xlab="HS", ylab= "Residuals")
abline(h=0,lty=2)
#Histogram of Residuals
hist(HS_PredictorModel_4p$resid, main = "Histogram of Residuals", ylab = "Residuals")
#Q-Q Plot
qqnorm(HS_PredictorModel_4p$resid)
qqline(HS_PredictorModel_4p$resid)
GpC_example <- 1.5
LE_example <- 0.69
GC_example <- 0.35
newcountry <- list("Country" = as.factor("WonderLand") , "Region" = as.factor("WESTERN EUROPE"), "HR" = 0, "HS" = 0, "LCI" = 0, "UCI" = 0, "GpC" = GpC_example, "Family" = 0, "LE" = LE_example, "Freedom" = 0, "GC" = GC_example, "Generosity" = 0, "DR" = 0)
mydata_bis <- mydata
mydata_bis <- rbind(mydata_bis, newcountry)
mysolution_3p <- predict(HS_PredictorModel_3p, mydata_bis[158,])
mysolution_3pb <- predict(HS_PredictorModel_3p,list("GpC" = GpC_example, "LE" = LE_example, "GC" = GC_example))
mysolution_4p <- predict(HS_PredictorModel_4p, mydata_bis[158,])
mysolution_3p
mysolution_4p
#Ejercici 2
#Ejercicio 2.1
library(caret)
dataLG <- mydata
dataLG$Grupo <- factor(ifelse(dataLG$HR <= 32, "best", "worse"), levels = c("worse","best"))
set.seed(1000)
traindataset <- createDataPartition(dataLG$HR, p=0.75, list = FALSE)
logitmodel <- glm(Grupo ~ GpC + GC, data = dataLG[traindataset,], family = binomial)
summary(logitmodel)
dataLG[-traindataset, "Probabilidad_Acierto"] <- predict(logitmodel, newdata = dataLG[-traindataset, ], type = "response" )
dataLG[-traindataset, "Acierto"] <- ifelse(dataLG[-traindataset, "Probabilidad_Acierto"] >= 0.5,1,0)
table(dataLG[-traindataset, "Grupo"], dataLG[-traindataset, "Acierto"], dnn=c("Real", "Predicho"))
#Ejercicio 2.2
GpC <- 1.5
GC <- 0.35
solution <- predict (logit, newdata = list("GpC" = GpC, "GC" = GC), type = 'response')
round(solution*100,2)
logitmodel_freedom <- glm(Grupo ~ GpC + GC + Freedom, data = dataLG[traindataset,], family = binomial)
summary(logitmodel_freedom)
logitmodel_Region <- glm(Grupo ~ GpC + GC + Region, data = dataLG[traindataset,], family = binomial)
summary(logitmodel_Region)
logitmodel_freeReg <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG[traindataset,], family = binomial)
summary(logitmodel_freeReg)
dataLG[-traindataset, "Probabilidad_Acierto"] <- predict(logitmodel_freeReg, newdata = dataLG[-traindataset, ], type = "response" )
dataLG[-traindataset, "Acierto"] <- ifelse(dataLG[-traindataset, "Probabilidad_Acierto"] >= 0.5,1,0)
table(dataLG[-traindataset, "Grupo"], dataLG[-traindataset, "Acierto"], dnn=c("Real", "Predicho"))
#Ejercicio 2.3
#Ejercicio 2.4
logitmodel_freedom <- glm(Grupo ~ GpC + GC + Freedom, data = dataLG[traindataset,], family = binomial)
logitmodel_Region <- glm(Grupo ~ GpC + GC + Region, data = dataLG[traindataset,], family = binomial)
logitmodel_freeReg <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG[traindataset,], family = binomial)
#Ejercicio 2.5
View(mydata)
View(dataLG)
logitmodel_freeReg_ej5 <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG, family = binomial)
logitmodel_freeReg_ej5$fitted.values
dataex5 <- cbind(dataLG, "Probabilidad" = logitmodel_freeReg_ej5$fitted.values)
View(dataex5)
source('practica1script.R')
library(caret)
library(rmarkdown)
#Crear un modelo de RLM para predecir la puntuación de la felicidad (HS) a partir de:
# - Indicador de renta per cápita (GpC)
# - Esperanza de vida en salud (LE)
# - Corrupción (GC)
head(mydata)
HS_PredictorModel_3p <- lm(HS ~ GpC + LE + GC, mydata)
summary(HS_PredictorModel_3p)
varImp(HS_PredictorModel_3p, scale = FALSE)
layout(matrix(c(1,1,2,3),2,2,byrow=T))
#Spend x Residuals Plot
plot(HS_PredictorModel_3p$resid~mydata$HS[order(mydata$HS)],
main="HS x Residuals\nfor Multiple Regression with 3 predictors",
xlab="HS", ylab= "Residuals")
abline(h=0,lty=2)
#Histogram of Residuals
hist(HS_PredictorModel_3p$resid, main = "Histogram of Residuals", ylab = "Residuals")
#Q-Q Plot
qqnorm(HS_PredictorModel_3p$resid)
qqline(HS_PredictorModel_3p$resid)
levels(mydata_ej2$Region) <- relevel(mydata_ej2$Region, ref = "WESTERN EUROPE")
HS_PredictorModel_4p <- lm(HS ~ Region + GpC + LE + GC, mydata)
summary(HS_PredictorModel_4p)
varImp(HS_PredictorModel_4p, scale = FALSE)
layout(matrix(c(1,1,2,3),2,2,byrow=T))
#Spend x Residuals Plot
plot(HS_PredictorModel_4p$resid~mydata$HS[order(mydata$HS)],
main="HS x Residuals\nfor Multiple Regression with",
xlab="HS", ylab= "Residuals")
abline(h=0,lty=2)
#Histogram of Residuals
hist(HS_PredictorModel_4p$resid, main = "Histogram of Residuals", ylab = "Residuals")
#Q-Q Plot
qqnorm(HS_PredictorModel_4p$resid)
qqline(HS_PredictorModel_4p$resid)
GpC_example <- 1.5
LE_example <- 0.69
GC_example <- 0.35
newcountry <- list("Country" = as.factor("WonderLand") , "Region" = as.factor("WESTERN EUROPE"), "HR" = 0, "HS" = 0, "LCI" = 0, "UCI" = 0, "GpC" = GpC_example, "Family" = 0, "LE" = LE_example, "Freedom" = 0, "GC" = GC_example, "Generosity" = 0, "DR" = 0)
mydata_bis <- mydata
mydata_bis <- rbind(mydata_bis, newcountry)
mysolution_3p <- predict(HS_PredictorModel_3p, mydata_bis[158,])
mysolution_3pb <- predict(HS_PredictorModel_3p,list("GpC" = GpC_example, "LE" = LE_example, "GC" = GC_example))
mysolution_4p <- predict(HS_PredictorModel_4p, mydata_bis[158,])
mysolution_3p
mysolution_4p
#Ejercici 2
#Ejercicio 2.1
library(caret)
dataLG <- mydata
dataLG$Grupo <- factor(ifelse(dataLG$HR <= 32, "best", "worse"), levels = c("worse","best"))
set.seed(1000)
traindataset <- createDataPartition(dataLG$HR, p=0.75, list = FALSE)
logitmodel <- glm(Grupo ~ GpC + GC, data = dataLG[traindataset,], family = binomial)
summary(logitmodel)
dataLG[-traindataset, "Probabilidad_Acierto"] <- predict(logitmodel, newdata = dataLG[-traindataset, ], type = "response" )
dataLG[-traindataset, "Acierto"] <- ifelse(dataLG[-traindataset, "Probabilidad_Acierto"] >= 0.5,1,0)
table(dataLG[-traindataset, "Grupo"], dataLG[-traindataset, "Acierto"], dnn=c("Real", "Predicho"))
#Ejercicio 2.2
GpC <- 1.5
GC <- 0.35
solution <- predict (logit, newdata = list("GpC" = GpC, "GC" = GC), type = 'response')
round(solution*100,2)
logitmodel_freedom <- glm(Grupo ~ GpC + GC + Freedom, data = dataLG[traindataset,], family = binomial)
summary(logitmodel_freedom)
logitmodel_Region <- glm(Grupo ~ GpC + GC + Region, data = dataLG[traindataset,], family = binomial)
summary(logitmodel_Region)
logitmodel_freeReg <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG[traindataset,], family = binomial)
summary(logitmodel_freeReg)
dataLG[-traindataset, "Probabilidad_Acierto"] <- predict(logitmodel_freeReg, newdata = dataLG[-traindataset, ], type = "response" )
dataLG[-traindataset, "Acierto"] <- ifelse(dataLG[-traindataset, "Probabilidad_Acierto"] >= 0.5,1,0)
table(dataLG[-traindataset, "Grupo"], dataLG[-traindataset, "Acierto"], dnn=c("Real", "Predicho"))
#Ejercicio 2.3
#Ejercicio 2.4
logitmodel_freedom <- glm(Grupo ~ GpC + GC + Freedom, data = dataLG[traindataset,], family = binomial)
logitmodel_Region <- glm(Grupo ~ GpC + GC + Region, data = dataLG[traindataset,], family = binomial)
logitmodel_freeReg <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG[traindataset,], family = binomial)
#Ejercicio 2.5
logitmodel_freeReg_ej5 <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG, family = binomial)
dataex5 <- cbind(dataLG, "Probabilidad" = logitmodel_freeReg_ej5$fitted.values)
View(dataex5)
dataex5 <- cbind(mydata, "Probabilidad" = logitmodel_freeReg_ej5$fitted.values)
View(dataex5)
dataex5filtered <- dataex5 %>% filter(Probabilidad > 0.80)
View(dataex5filtered)
plot(dataex5filtered$Probabilidad, dataex5filtered$HR)
dataex5filtered %>% filter(dataex5filtered$HR > 32)
plot(dataex5filtered$HR~dataes5filtered$Probability, xlim = c(0, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'Ranking Final de Felicidad vs Probabilidad de estar entre los 32 paises mas felices',
data = dataex5filtered$Country)
plot(HR~Probability, xlim = c(0, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'Ranking Final de Felicidad vs Probabilidad de estar entre los 32 paises mas felices',
data = dataex5filtered)
plot(HR~Probabilidad, xlim = c(0, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'Ranking Final de Felicidad vs Probabilidad de estar entre los 32 paises mas felices',
data = dataex5filtered)
plot(HR~Probabilidad, xlim = c(0.85, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'Ranking Final de Felicidad vs Probabilidad de estar entre los 32 paises mas felices',
data = dataex5filtered)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.85, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'Ranking Final de Felicidad vs Probabilidad de estar entre los 32 paises mas felices',
data = dataex5filtered)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.85, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a ""best"" ',
data = dataex5filtered)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.85, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = row.names(dataex5filtered), pos = 4))
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 4))
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.85, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 4))
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 4, size = 7))
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.75, 1.25),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 4))
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 4, cex = 0.5))
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.8, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 4, cex = 0.5))
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.80, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 4, cex = 0.7))
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 3, cex = 0.7))
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 2, cex = 0.7))
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.80, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 2, cex = 0.7))
dataex5filtered %>% filter(dataex5filtered$Probabilidad < 0.80 & dataex5filtered$HR < 32)
nrow(dataex5filtered %>% filter(dataex5filtered$HR > 32))
nrow(dataex5filtered <- dataex5 %>% filter(Probabilidad > 0.80))
dataex5filtered
dataex5 %>% filter(dataex5$Probabilidad < 0.80 & dataex5$HR < 32)
dataex5filtered_belowP <- dataex5 %>% filter(dataex5$Probabilidad < 0.80 & dataex5$HR < 32)
dataex5filtered_belowP <- dataex5 %>% filter(dataex5$Probabilidad < 0.80 & dataex5$HR < 32)
plot(HR~Probabilidad, xlim = c(0.80, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered_belowP)
with(dataex5filtered_belowP, text(HR~Probabilidad, labels = dataex5filtered_belowP$Country, pos = 2, cex = 0.7))
dataex5filtered_belowP <- dataex5 %>% filter(dataex5$Probabilidad < 0.80 & dataex5$HR < 32)
plot(HR~Probabilidad, xlim = c(0, 0.80),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered_belowP)
with(dataex5filtered_belowP, text(HR~Probabilidad, labels = dataex5filtered_belowP$Country, pos = 2, cex = 0.7))
plot(HR~Probabilidad, xlim = c(0, 0.80),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered_belowP)
with(dataex5filtered_belowP, text(HR~Probabilidad, labels = dataex5filtered_belowP$Country, pos = 3, cex = 0.7))
plot(HR~Probabilidad, xlim = c(0, 0.80),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered_belowP)
with(dataex5filtered_belowP, text(HR~Probabilidad, labels = dataex5filtered_belowP$Country, pos = 4, cex = 0.7))
library(dplyr)
logitmodel_freeReg_ej5 <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG, family = binomial)
dataex5 <- cbind(mydata, "Probabilidad" = logitmodel_freeReg_ej5$fitted.values)
dataex5filtered <- dataex5 %>% filter(Probabilidad > 0.80)
View(dataex5filtered)
plot(dataex5filtered$Probabilidad, dataex5filtered$HR)
dataex5filtered %>% filter(dataex5filtered$HR > 32)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.80, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 2, cex = 0.7))
logitmodel_freeReg_ej5 <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG, family = binomial)
dataex5 <- cbind(mydata, "Probabilidad" = logitmodel_freeReg_ej5$fitted.values)
dataex5filtered <- dataex5 %>% filter(Probabilidad > 0.80 & HS > 32)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.80, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 2, cex = 0.7))
logitmodel_freeReg_ej5 <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG, family = binomial)
dataex5 <- cbind(mydata, "Probabilidad" = logitmodel_freeReg_ej5$fitted.values)
dataex5filtered <- dataex5 %>% filter(Probabilidad > 0.80)
View(dataex5filtered)
plot(dataex5filtered$Probabilidad, dataex5filtered$HR)
dataex5filtered %>% filter(dataex5filtered$HR > 32)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.80, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 2, cex = 0.7))
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.80, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 2, cex = 0.7))
logitmodel_freeReg_ej5 <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG, family = binomial)
dataex5 <- cbind(mydata, "Probabilidad" = logitmodel_freeReg_ej5$fitted.values)
dataex5filtered <- dataex5 %>% filter(Probabilidad > 0.80 & HR > 32)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.80, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 2, cex = 0.7))
dataex5filtered
logitmodel_freeReg_ej5 <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG, family = binomial)
dataex5 <- cbind(mydata, "Probabilidad" = logitmodel_freeReg_ej5$fitted.values)
dataex5filtered <- dataex5 %>% filter(Probabilidad < 0.2 & HR < 32)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0, 0.50),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 2, cex = 0.7))
knitr::opts_chunk$set(echo = TRUE)
library(caret)
dataex5afiltered
dataex5afiltered
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(caret)
load('misdatospractica1.RData')
head(mydata)
HS_PredictorModel_3p <- lm(HS ~ GpC + LE + GC, mydata)
summary(HS_PredictorModel_3p)
varImp(HS_PredictorModel_3p, scale = FALSE)
layout(matrix(c(1,1,2,3),2,2,byrow=T))
plot(HS_PredictorModel_3p$resid~mydata$HS[order(mydata$HS)],
main="HS x Residuals\nfor Multiple Regression with 3 predictors",
xlab="HS", ylab= "Residuals")
abline(h=0,lty=2)
hist(HS_PredictorModel_3p$resid, main = "Histogram of Residuals", ylab = "Residuals")
qqnorm(HS_PredictorModel_3p$resid)
qqline(HS_PredictorModel_3p$resid)
levels(mydata$Region) <- relevel(mydata$Region, ref = "WESTERN EUROPE")
HS_PredictorModel_4p <- lm(HS ~ Region + GpC + LE + GC, mydata)
summary(HS_PredictorModel_4p)
layout(matrix(c(1,1,2,3),2,2,byrow=T))
plot(HS_PredictorModel_4p$resid~mydata$HS[order(mydata$HS)],
main="HS x Residuals\nfor Multiple Regression with 4 predictors",
xlab="HS", ylab= "Residuals")
abline(h=0,lty=2)
hist(HS_PredictorModel_4p$resid, main = "Histogram of Residuals", ylab = "Residuals")
qqnorm(HS_PredictorModel_4p$resid)
qqline(HS_PredictorModel_4p$resid)
GpC_example <- 1.5
LE_example <- 0.69
GC_example <- 0.35
#Añadimos el nuevo pais con NAs en aquellos datos no proporcionados.
newcountry <- list("Country" = "WonderLand" , "Region" = as.factor("WESTERN EUROPE"), "HR" = NA, "HS" = NA, "LCI" = NA, "UCI" = NA, "GpC" = GpC_example, "Family" = NA, "LE" = LE_example, "Freedom" = NA, "GC" = GC_example, "Generosity" = NA, "DR" = NA)
mydata_bis <- mydata
mydata_bis[,'Country'] <- as.character(mydata_bis[,"Country"])
mydata_bis <- rbind(mydata_bis, newcountry)
mysolution_3p <- predict(HS_PredictorModel_3p, mydata_bis[158,])
mysolution_4p <- predict(HS_PredictorModel_4p, mydata_bis[158,])
mysolution_3p
mysolution_4p
mydata_bis[158, 'HS'] <- mysolution_4p
tail(mydata_bis)
library(caret)
dataLG <- mydata
dataLG$Grupo <- factor(ifelse(dataLG$HR <= 32, "best", "worse"), levels = c("worse","best"))
set.seed(1000)
traindataset <- createDataPartition(dataLG$HR, p=0.75, list = FALSE)
logitmodel <- glm(Grupo ~ GpC + GC, data = dataLG[traindataset,], family = binomial)
summary(logitmodel)
dataLG[-traindataset, "Probabilidad_Acierto"] <- predict(logitmodel, newdata = dataLG[-traindataset, ], type = "response" )
dataLG[-traindataset, "Acierto"] <- ifelse(dataLG[-traindataset, "Probabilidad_Acierto"] >= 0.5,1,0)
table(dataLG[-traindataset, "Grupo"], dataLG[-traindataset, "Acierto"], dnn=c("Real", "Predicho"))
GpC <- 1.5
GC <- 0.35
solution <- predict (logitmodel, newdata = list("GpC" = GpC, "GC" = GC), type = 'response')
round(solution*100,2)
logitmodel_freedom <- glm(Grupo ~ GpC + GC + Freedom, data = dataLG[traindataset,], family = binomial)
logitmodel_Region <- glm(Grupo ~ GpC + GC + Region, data = dataLG[traindataset,], family = binomial)
logitmodel_freeReg <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG[traindataset,], family = binomial)
dataLG[-traindataset, "Probabilidad_Acierto"] <- predict(logitmodel_freeReg, newdata = dataLG[-traindataset, ], type = "response" )
dataLG[-traindataset, "Acierto"] <- ifelse(dataLG[-traindataset, "Probabilidad_Acierto"] >= 0.5,1,0)
table(dataLG[-traindataset, "Grupo"], dataLG[-traindataset, "Acierto"], dnn=c("Real", "Predicho"))
dataLG[-traindataset, "Probabilidad_Acierto"] <- predict(logitmodel_freeReg, newdata = dataLG[-traindataset, ], type = "response" )
dataLG[-traindataset, "Acierto"] <- ifelse(dataLG[-traindataset, "Probabilidad_Acierto"] >= 0.8,1,0)
table(dataLG[-traindataset, "Grupo"], dataLG[-traindataset, "Acierto"], dnn=c("Real", "Predicho"))
library(dplyr)
logitmodel_freeReg_ej5 <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG, family = binomial)
dataex5 <- cbind(mydata, "Probabilidad" = logitmodel_freeReg_ej5$fitted.values)
dataex5afiltered <- dataex5 %>% filter(Probabilidad > 0.80 & HR > 32)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.80, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5afiltered)
with(dataex5afiltered, text(HR~Probabilidad, labels = dataex5afiltered$Country, pos = 2, cex = 0.6))
dataex5afiltered
dataex5
dataex5afiltered
dataex5
dataex5afiltered <- dataex5 %>% filter(Probabilidad > 0.80)
dataex5afiltered
dataex5bfiltered <- dataex5 %>% filter(Probabilidad < 0.2 & HR < 32)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0, 0.50),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5bfiltered)
with(dataex5bfiltered, text(HR~Probabilidad, labels = dataex5bfiltered$Country, pos = 2, cex = 0.7))
dataex5bfiltered <- dataex5 %>% filter(Probabilidad < 0.2 & HR < 32)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0, 0.50),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5bfiltered)
with(dataex5bfiltered, text(HR~Probabilidad, labels = dataex5bfiltered$Country, pos = 2, cex = 0.7))
print(mysolution_3p, mysolution_4p)
