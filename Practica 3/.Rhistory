ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 4, cex = 0.7))
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 3, cex = 0.7))
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 2, cex = 0.7))
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.80, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 2, cex = 0.7))
dataex5filtered %>% filter(dataex5filtered$Probabilidad < 0.80 & dataex5filtered$HR < 32)
nrow(dataex5filtered %>% filter(dataex5filtered$HR > 32))
nrow(dataex5filtered <- dataex5 %>% filter(Probabilidad > 0.80))
dataex5filtered
dataex5 %>% filter(dataex5$Probabilidad < 0.80 & dataex5$HR < 32)
dataex5filtered_belowP <- dataex5 %>% filter(dataex5$Probabilidad < 0.80 & dataex5$HR < 32)
dataex5filtered_belowP <- dataex5 %>% filter(dataex5$Probabilidad < 0.80 & dataex5$HR < 32)
plot(HR~Probabilidad, xlim = c(0.80, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered_belowP)
with(dataex5filtered_belowP, text(HR~Probabilidad, labels = dataex5filtered_belowP$Country, pos = 2, cex = 0.7))
dataex5filtered_belowP <- dataex5 %>% filter(dataex5$Probabilidad < 0.80 & dataex5$HR < 32)
plot(HR~Probabilidad, xlim = c(0, 0.80),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered_belowP)
with(dataex5filtered_belowP, text(HR~Probabilidad, labels = dataex5filtered_belowP$Country, pos = 2, cex = 0.7))
plot(HR~Probabilidad, xlim = c(0, 0.80),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered_belowP)
with(dataex5filtered_belowP, text(HR~Probabilidad, labels = dataex5filtered_belowP$Country, pos = 3, cex = 0.7))
plot(HR~Probabilidad, xlim = c(0, 0.80),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered_belowP)
with(dataex5filtered_belowP, text(HR~Probabilidad, labels = dataex5filtered_belowP$Country, pos = 4, cex = 0.7))
library(dplyr)
logitmodel_freeReg_ej5 <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG, family = binomial)
dataex5 <- cbind(mydata, "Probabilidad" = logitmodel_freeReg_ej5$fitted.values)
dataex5filtered <- dataex5 %>% filter(Probabilidad > 0.80)
View(dataex5filtered)
plot(dataex5filtered$Probabilidad, dataex5filtered$HR)
dataex5filtered %>% filter(dataex5filtered$HR > 32)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.80, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 2, cex = 0.7))
logitmodel_freeReg_ej5 <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG, family = binomial)
dataex5 <- cbind(mydata, "Probabilidad" = logitmodel_freeReg_ej5$fitted.values)
dataex5filtered <- dataex5 %>% filter(Probabilidad > 0.80 & HS > 32)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.80, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 2, cex = 0.7))
logitmodel_freeReg_ej5 <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG, family = binomial)
dataex5 <- cbind(mydata, "Probabilidad" = logitmodel_freeReg_ej5$fitted.values)
dataex5filtered <- dataex5 %>% filter(Probabilidad > 0.80)
View(dataex5filtered)
plot(dataex5filtered$Probabilidad, dataex5filtered$HR)
dataex5filtered %>% filter(dataex5filtered$HR > 32)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.80, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 2, cex = 0.7))
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.80, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 2, cex = 0.7))
logitmodel_freeReg_ej5 <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG, family = binomial)
dataex5 <- cbind(mydata, "Probabilidad" = logitmodel_freeReg_ej5$fitted.values)
dataex5filtered <- dataex5 %>% filter(Probabilidad > 0.80 & HR > 32)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.80, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 2, cex = 0.7))
dataex5filtered
logitmodel_freeReg_ej5 <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG, family = binomial)
dataex5 <- cbind(mydata, "Probabilidad" = logitmodel_freeReg_ej5$fitted.values)
dataex5filtered <- dataex5 %>% filter(Probabilidad < 0.2 & HR < 32)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0, 0.50),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 2, cex = 0.7))
knitr::opts_chunk$set(echo = TRUE)
library(caret)
dataex5afiltered
dataex5afiltered
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(caret)
load('misdatospractica1.RData')
head(mydata)
HS_PredictorModel_3p <- lm(HS ~ GpC + LE + GC, mydata)
summary(HS_PredictorModel_3p)
varImp(HS_PredictorModel_3p, scale = FALSE)
layout(matrix(c(1,1,2,3),2,2,byrow=T))
plot(HS_PredictorModel_3p$resid~mydata$HS[order(mydata$HS)],
main="HS x Residuals\nfor Multiple Regression with 3 predictors",
xlab="HS", ylab= "Residuals")
abline(h=0,lty=2)
hist(HS_PredictorModel_3p$resid, main = "Histogram of Residuals", ylab = "Residuals")
qqnorm(HS_PredictorModel_3p$resid)
qqline(HS_PredictorModel_3p$resid)
levels(mydata$Region) <- relevel(mydata$Region, ref = "WESTERN EUROPE")
HS_PredictorModel_4p <- lm(HS ~ Region + GpC + LE + GC, mydata)
summary(HS_PredictorModel_4p)
layout(matrix(c(1,1,2,3),2,2,byrow=T))
plot(HS_PredictorModel_4p$resid~mydata$HS[order(mydata$HS)],
main="HS x Residuals\nfor Multiple Regression with 4 predictors",
xlab="HS", ylab= "Residuals")
abline(h=0,lty=2)
hist(HS_PredictorModel_4p$resid, main = "Histogram of Residuals", ylab = "Residuals")
qqnorm(HS_PredictorModel_4p$resid)
qqline(HS_PredictorModel_4p$resid)
GpC_example <- 1.5
LE_example <- 0.69
GC_example <- 0.35
#AÃ±adimos el nuevo pais con NAs en aquellos datos no proporcionados.
newcountry <- list("Country" = "WonderLand" , "Region" = as.factor("WESTERN EUROPE"), "HR" = NA, "HS" = NA, "LCI" = NA, "UCI" = NA, "GpC" = GpC_example, "Family" = NA, "LE" = LE_example, "Freedom" = NA, "GC" = GC_example, "Generosity" = NA, "DR" = NA)
mydata_bis <- mydata
mydata_bis[,'Country'] <- as.character(mydata_bis[,"Country"])
mydata_bis <- rbind(mydata_bis, newcountry)
mysolution_3p <- predict(HS_PredictorModel_3p, mydata_bis[158,])
mysolution_4p <- predict(HS_PredictorModel_4p, mydata_bis[158,])
mysolution_3p
mysolution_4p
mydata_bis[158, 'HS'] <- mysolution_4p
tail(mydata_bis)
library(caret)
dataLG <- mydata
dataLG$Grupo <- factor(ifelse(dataLG$HR <= 32, "best", "worse"), levels = c("worse","best"))
set.seed(1000)
traindataset <- createDataPartition(dataLG$HR, p=0.75, list = FALSE)
logitmodel <- glm(Grupo ~ GpC + GC, data = dataLG[traindataset,], family = binomial)
summary(logitmodel)
dataLG[-traindataset, "Probabilidad_Acierto"] <- predict(logitmodel, newdata = dataLG[-traindataset, ], type = "response" )
dataLG[-traindataset, "Acierto"] <- ifelse(dataLG[-traindataset, "Probabilidad_Acierto"] >= 0.5,1,0)
table(dataLG[-traindataset, "Grupo"], dataLG[-traindataset, "Acierto"], dnn=c("Real", "Predicho"))
GpC <- 1.5
GC <- 0.35
solution <- predict (logitmodel, newdata = list("GpC" = GpC, "GC" = GC), type = 'response')
round(solution*100,2)
logitmodel_freedom <- glm(Grupo ~ GpC + GC + Freedom, data = dataLG[traindataset,], family = binomial)
logitmodel_Region <- glm(Grupo ~ GpC + GC + Region, data = dataLG[traindataset,], family = binomial)
logitmodel_freeReg <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG[traindataset,], family = binomial)
dataLG[-traindataset, "Probabilidad_Acierto"] <- predict(logitmodel_freeReg, newdata = dataLG[-traindataset, ], type = "response" )
dataLG[-traindataset, "Acierto"] <- ifelse(dataLG[-traindataset, "Probabilidad_Acierto"] >= 0.5,1,0)
table(dataLG[-traindataset, "Grupo"], dataLG[-traindataset, "Acierto"], dnn=c("Real", "Predicho"))
dataLG[-traindataset, "Probabilidad_Acierto"] <- predict(logitmodel_freeReg, newdata = dataLG[-traindataset, ], type = "response" )
dataLG[-traindataset, "Acierto"] <- ifelse(dataLG[-traindataset, "Probabilidad_Acierto"] >= 0.8,1,0)
table(dataLG[-traindataset, "Grupo"], dataLG[-traindataset, "Acierto"], dnn=c("Real", "Predicho"))
library(dplyr)
logitmodel_freeReg_ej5 <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG, family = binomial)
dataex5 <- cbind(mydata, "Probabilidad" = logitmodel_freeReg_ej5$fitted.values)
dataex5afiltered <- dataex5 %>% filter(Probabilidad > 0.80 & HR > 32)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.80, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5afiltered)
with(dataex5afiltered, text(HR~Probabilidad, labels = dataex5afiltered$Country, pos = 2, cex = 0.6))
dataex5afiltered
dataex5
dataex5afiltered
dataex5
dataex5afiltered <- dataex5 %>% filter(Probabilidad > 0.80)
dataex5afiltered
dataex5bfiltered <- dataex5 %>% filter(Probabilidad < 0.2 & HR < 32)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0, 0.50),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5bfiltered)
with(dataex5bfiltered, text(HR~Probabilidad, labels = dataex5bfiltered$Country, pos = 2, cex = 0.7))
dataex5bfiltered <- dataex5 %>% filter(Probabilidad < 0.2 & HR < 32)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0, 0.50),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5bfiltered)
with(dataex5bfiltered, text(HR~Probabilidad, labels = dataex5bfiltered$Country, pos = 2, cex = 0.7))
print(mysolution_3p, mysolution_4p)
source('practica1script.R')
library(caret)
library(rmarkdown)
#Crear un modelo de RLM para predecir la puntuaciÃ³n de la felicidad (HS) a partir de:
# - Indicador de renta per cÃ¡pita (GpC)
# - Esperanza de vida en salud (LE)
# - CorrupciÃ³n (GC)
head(mydata)
HS_PredictorModel_3p <- lm(HS ~ GpC + LE + GC, mydata)
summary(HS_PredictorModel_3p)
varImp(HS_PredictorModel_3p, scale = FALSE)
layout(matrix(c(1,1,2,3),2,2,byrow=T))
#Spend x Residuals Plot
plot(HS_PredictorModel_3p$resid~mydata$HS[order(mydata$HS)],
main="HS x Residuals\nfor Multiple Regression with 3 predictors",
xlab="HS", ylab= "Residuals")
abline(h=0,lty=2)
#Histogram of Residuals
hist(HS_PredictorModel_3p$resid, main = "Histogram of Residuals", ylab = "Residuals")
#Q-Q Plot
qqnorm(HS_PredictorModel_3p$resid)
qqline(HS_PredictorModel_3p$resid)
levels(mydata_ej2$Region) <- relevel(mydata_ej2$Region, ref = "WESTERN EUROPE")
HS_PredictorModel_4p <- lm(HS ~ Region + GpC + LE + GC, mydata)
summary(HS_PredictorModel_4p)
varImp(HS_PredictorModel_4p, scale = FALSE)
layout(matrix(c(1,1,2,3),2,2,byrow=T))
#Spend x Residuals Plot
plot(HS_PredictorModel_4p$resid~mydata$HS[order(mydata$HS)],
main="HS x Residuals\nfor Multiple Regression with",
xlab="HS", ylab= "Residuals")
abline(h=0,lty=2)
#Histogram of Residuals
hist(HS_PredictorModel_4p$resid, main = "Histogram of Residuals", ylab = "Residuals")
#Q-Q Plot
qqnorm(HS_PredictorModel_4p$resid)
qqline(HS_PredictorModel_4p$resid)
GpC_example <- 1.5
LE_example <- 0.69
GC_example <- 0.35
newcountry <- list("Country" = as.factor("WonderLand") , "Region" = as.factor("WESTERN EUROPE"), "HR" = 0, "HS" = 0, "LCI" = 0, "UCI" = 0, "GpC" = GpC_example, "Family" = 0, "LE" = LE_example, "Freedom" = 0, "GC" = GC_example, "Generosity" = 0, "DR" = 0)
mydata_bis <- mydata
mydata_bis <- rbind(mydata_bis, newcountry)
mysolution_3p <- predict(HS_PredictorModel_3p, mydata_bis[158,])
mysolution_3pb <- predict(HS_PredictorModel_3p,list("GpC" = GpC_example, "LE" = LE_example, "GC" = GC_example))
mysolution_4p <- predict(HS_PredictorModel_4p, mydata_bis[158,])
mysolution_3p
mysolution_4p
#Ejercici 2
#Ejercicio 2.1
library(caret)
dataLG <- mydata
dataLG$Grupo <- factor(ifelse(dataLG$HR <= 32, "best", "worse"), levels = c("worse","best"))
set.seed(1000)
traindataset <- createDataPartition(dataLG$HR, p=0.75, list = FALSE)
logitmodel <- glm(Grupo ~ GpC + GC, data = dataLG[traindataset,], family = binomial)
summary(logitmodel)
dataLG[-traindataset, "Probabilidad_Acierto"] <- predict(logitmodel, newdata = dataLG[-traindataset, ], type = "response" )
dataLG[-traindataset, "Acierto"] <- ifelse(dataLG[-traindataset, "Probabilidad_Acierto"] >= 0.5,1,0)
table(dataLG[-traindataset, "Grupo"], dataLG[-traindataset, "Acierto"], dnn=c("Real", "Predicho"))
#Ejercicio 2.2
GpC <- 1.5
GC <- 0.35
solution <- predict (logit, newdata = list("GpC" = GpC, "GC" = GC), type = 'response')
round(solution*100,2)
logitmodel_freedom <- glm(Grupo ~ GpC + GC + Freedom, data = dataLG[traindataset,], family = binomial)
summary(logitmodel_freedom)
logitmodel_Region <- glm(Grupo ~ GpC + GC + Region, data = dataLG[traindataset,], family = binomial)
summary(logitmodel_Region)
logitmodel_freeReg <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG[traindataset,], family = binomial)
summary(logitmodel_freeReg)
dataLG[-traindataset, "Probabilidad_Acierto"] <- predict(logitmodel_freeReg, newdata = dataLG[-traindataset, ], type = "response" )
dataLG[-traindataset, "Acierto"] <- ifelse(dataLG[-traindataset, "Probabilidad_Acierto"] >= 0.5,1,0)
table(dataLG[-traindataset, "Grupo"], dataLG[-traindataset, "Acierto"], dnn=c("Real", "Predicho"))
#Ejercicio 2.3
#Ejercicio 2.4
logitmodel_freedom <- glm(Grupo ~ GpC + GC + Freedom, data = dataLG[traindataset,], family = binomial)
logitmodel_Region <- glm(Grupo ~ GpC + GC + Region, data = dataLG[traindataset,], family = binomial)
logitmodel_freeReg <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG[traindataset,], family = binomial)
#Ejercicio 2.5
logitmodel_freeReg_ej5 <- glm(Grupo ~ GpC + GC + Freedom + Region, data = dataLG, family = binomial)
dataex5 <- cbind(mydata, "Probabilidad" = logitmodel_freeReg_ej5$fitted.values)
dataex5filtered <- dataex5 %>% filter(Probabilidad > 0.80 & HR > 32)
par(mfrow=c(1,1))
plot(HR~Probabilidad, xlim = c(0.80, 1),
xlab = 'Probabilidad de pertenecer a la clase best',
ylab = 'Ranking de Felicidad (HR)',
main = 'HR vs Probabilidad de percetener a clase "best" ',
data = dataex5filtered)
with(dataex5filtered, text(HR~Probabilidad, labels = dataex5filtered$Country, pos = 2, cex = 0.7))
#Ejercicio 2.6
library(pROC)
str(dataex2)
testdf <- dataLG[-traindataset,]
roc_obj <- roc(testdf$Grupo, testdf$Acierto)
auc(roc_obj)
plot.roc(roc_obj)
dataex5 <- cbind(mydata, "Probabilidad" = logitmodel_freeReg_ej5$fitted.values)
Str(data)
Str(dataex5)
rtr(dataex5)
str(dataex5)
dataex5$labels <- ifelse(dataex5$HR < 32, 1, 0)
buiildingROC <- list("labels" = dataex5$labels, "scores" = dataex5$Probabilidad)
buildingROC <- cbind(buildingROC)
buildingROC <- list("labels" = dataex5$labels, "scores" = dataex5$Probabilidad)
buildingROC <- cbind(buildingROC)
buildingROC
buildingROC <- do.call(cbind, buildingROC)
buildingROC
simple_roc <- function(labels, scores){
labels <- labels[order(scores, decreasing=TRUE)]
data.frame(TPR=cumsum(labels)/sum(labels), FPR=cumsum(!labels)/sum(!labels), labels)
}
simple_roc(buiildingROC$labels, buildingROC$scores)
simple_roc(buildingROC$labels, buildingROC$scores)
labels <- buildingROC$labels
buildingROC
names <- c("labels", "scores")
simple_roc <- function(labels, scores){
labels <- labels[order(scores, decreasing=TRUE)]
data.frame(TPR=cumsum(labels)/sum(labels), FPR=cumsum(!labels)/sum(!labels), labels)
}
simple_roc(buildingROC$labels, buildingROC$scores)
buildingROC
names <- c("labels", "scores")
names(buildingROC) <- c("labels", "scores")
simple_roc <- function(labels, scores){
labels <- labels[order(scores, decreasing=TRUE)]
data.frame(TPR=cumsum(labels)/sum(labels), FPR=cumsum(!labels)/sum(!labels), labels)
}
simple_roc(buildingROC$labels, buildingROC$scores)
str(buildingROC)
buildingROC <- as.data.frame(do.call(cbind, buildingROC))
buildingROC <- list("labels" = dataex5$labels, "scores" = dataex5$Probabilidad)
buildingROC <- as.data.frame(do.call(cbind, buildingROC))
str(buildingROC)
simple_roc <- function(labels, scores){
labels <- labels[order(scores, decreasing=TRUE)]
data.frame(TPR=cumsum(labels)/sum(labels), FPR=cumsum(!labels)/sum(!labels), labels)
}
simple_roc(buildingROC$labels, buildingROC$scores)
score_data %>%
ggplot(aes(x=dataex5$GpC, y=buildingROC$scores, col=buildingROC$labels)) +
scale_color_manual(values=c("black", "red")) +
geom_point() +
geom_rug() +
ggtitle("LeL")
set.seed(1)
sim_widget_data <- function(N, noise=100){
x <- runif(N, min=0, max=100)
y <- 122 - x/2 + rnorm(N, sd=noise)
bad_widget <- factor(y > 100)
data.frame(x, y, bad_widget)
}
widget_data <- sim_widget_data(500, 10)
test_set_idx <- sample(1:nrow(widget_data), size=floor(nrow(widget_data)/4))
test_set <- widget_data[test_set_idx,]
training_set <- widget_data[-test_set_idx,]
library(ggplot2)
library(dplyr)
test_set %>%
ggplot(aes(x=x, y=y, col=bad_widget)) +
scale_color_manual(values=c("black", "red")) +
geom_point() +
ggtitle("Bad widgets related to x")
fit_glm <- glm(bad_widget ~ x, training_set, family=binomial(link="logit"))
glm_link_scores <- predict(fit_glm, test_set, type="link")
glm_response_scores <- predict(fit_glm, test_set, type="response")
score_data <- data.frame(link=glm_link_scores,
response=glm_response_scores,
bad_widget=test_set$bad_widget,
stringsAsFactors=FALSE)
score_data %>%
ggplot(aes(x=link, y=response, col=bad_widget)) +
scale_color_manual(values=c("black", "red")) +
geom_point() +
geom_rug() +
ggtitle("Both link and response scores put cases in the same order")
str(widget_data)
myroc <- cbind(mydata$HR, mydata$GpC)
myroc$Grupo <- ifelse(myroc$HR < 32, TRUE, FALSE)
myroc <- cbind(mydata$HR, mydata$GpC)
myroc$Grupo <- ifelse(myroc$HR < 32, 1, 0)
str(myroc)
myroc <- as.data.frame(cbind(mydata$HR, mydata$GpC))
str(myroc)
myroc <- as.data.frame(cbind("LOL" = mydata$HR, mydata$GpC))
str(myroc)
myroc <- as.data.frame(cbind("HR" = mydata$HR, "GpC" mydata$GpC))
str(myroc)
myroc <- as.data.frame(cbind("HR" = mydata$HR, "GpC" = mydata$GpC))
str(myroc)
myroc$Grupo <- ifelse(myroc$HR < 32, 1, 0)
myroc
test_set_idx <- sample(1:nrow(myroc), size=floor(nrow(myroc)/4))
test_set <- myroc[test_set_idx,]
training_set <- myroc[-test_set_idx,]
library(ggplot2)
library(dplyr)
test_set <- myroc[test_set_idx,]
training_set <- myroc[-test_set_idx,]
library(ggplot2)
library(dplyr)
test_set %>%
ggplot(aes(x=GpC, y=HR, col=Grupo)) +
scale_color_manual(values=c("black", "red")) +
geom_point() +
ggtitle("best related to GpC")
myroc <- as.data.frame(cbind("HR" = mydata$HR, "GpC" = mydata$GpC))
myroc$Grupo <- ifelse(myroc$HR < 32, "TRUE", "FALSE")
myroc
test_set_idx <- sample(1:nrow(myroc), size=floor(nrow(myroc)/4))
test_set <- myroc[test_set_idx,]
training_set <- myroc[-test_set_idx,]
library(ggplot2)
library(dplyr)
test_set %>%
ggplot(aes(x=GpC, y=HR, col=Grupo)) +
scale_color_manual(values=c("black", "red")) +
geom_point() +
ggtitle("best related to GpC")
fit_glm <- glm(Grupo ~ GpC, training_set, family=binomial(link="logit"))
widget_data
fit_glm_mine <- glm(Grupo ~ GpC, training_set, family=binomial(link="logit"))
myroc
str(myroc)
str(widget_data)
myroc <- as.data.frame(cbind("HR" = mydata$HR, "GpC" = mydata$GpC))
myroc$Grupo <- as.factor(ifelse(myroc$HR < 32, "TRUE", "FALSE"))
str(myroc)
test_set_idx <- sample(1:nrow(myroc), size=floor(nrow(myroc)/4))
test_set <- myroc[test_set_idx,]
training_set <- myroc[-test_set_idx,]
library(ggplot2)
library(dplyr)
test_set %>%
ggplot(aes(x=GpC, y=HR, col=Grupo)) +
scale_color_manual(values=c("black", "red")) +
geom_point() +
ggtitle("best related to GpC")
fit_glm <- glm(bad_widget ~ x, training_set, family=binomial(link="logit"))
fit_glm_mine <- glm(Grupo ~ GpC, training_set, family=binomial(link="logit"))
glm_link_scores <- predict(fit_glm_mine, test_set, type="link")
glm_response_scores <- predict(fit_glm_mine, test_set, type="response")
score_data <- data.frame(link=glm_link_scores,
response=glm_response_scores,
bad_widget=test_set$bad_widget,
stringsAsFactors=FALSE)
score_data <- data.frame(link=glm_link_scores,
response=glm_response_scores,
bad_widget=test_set$Grupo,
stringsAsFactors=FALSE)
score_data %>%
ggplot(aes(x=link, y=response, col=bad_widget)) +
scale_color_manual(values=c("black", "red")) +
geom_point() +
geom_rug() +
ggtitle("Both link and response scores put cases in the same order")
library(pROC)
plot(roc(test_set$Grupo, glm_response_scores, direction="<"),
col="yellow", lwd=3, main="The turtle finds its way")
##
## Call:
## roc.default(response = test_set$bad_widget, predictor = glm_response_scores,     direction = "<")
##
## Data: glm_response_scores in 59 controls (test_set$bad_widget FALSE) < 66 cases (test_set$bad_widget TRUE).
## Area under the curve: 0.9037
glm_simple_roc <- simple_roc(test_set$Grupo=="TRUE", glm_link_scores)
with(glm_simple_roc, points(1 - FPR, TPR, col=1 + labels))
glm_response_scores <- predict(HS_PredictorModel_4p, testdf, type = "response")
glm_response_scores
glm_response_scores <- predict(HS_PredictorModel_4p, testdf, type = "response")
testdf <- dataLG[-traindataset,]
roc_obj <- roc(testdf$Grupo, testdf$Acierto)
auc(roc_obj)
plot.roc(roc_obj)
plot(roc(testdf$Grupo, glm_response_scores , direction="<"),
col="yellow", lwd=3, main="The turtle finds its way")
glm_response_scores <- predict(HS_PredictorModel_4p, testdf, type = "response")
testdf <- dataLG[-traindataset,]
roc_obj <- roc(testdf$Grupo, testdf$Acierto)
auc(roc_obj)
plot.roc(roc_obj)
plot(roc(testdf$Grupo, glm_response_scores , direction="<"),
col="blue", lwd=3, main="The turtle finds its way")
glm_response_scores <- predict(HS_PredictorModel_4p, testdf, type = "response")
testdf <- dataLG[-traindataset,]
roc_obj <- roc(testdf$Grupo, testdf$Acierto)
auc(roc_obj)
plot.roc(roc_obj)
plot(roc(testdf$Grupo, glm_response_scores , direction="<"),
col="blue", lwd=3, main="The turtle finds its way")
glm_response_scores <- predict(HS_PredictorModel_4p, testdf, type = "response")
testdf <- dataLG[-traindataset,]
roc_obj <- roc(testdf$Grupo, testdf$Acierto)
auc(roc_obj)
plot.roc(roc_obj)
plot(roc(testdf$Grupo, glm_response_scores , direction="<"),
col="blue", lwd=3, main="The turtle finds its way")
