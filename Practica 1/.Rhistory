EstandarFOR <- function(x) {
s <- strsplit(x, " ")[[1]]
for (i in 1:length(s)) {
if (s[i] != "and") {
ss <- strsplit(s[i], "")
if (ss[i][1] == "(") {
s[i] <- paste(toupper(substring(s[i],2,2)), substring(s[i], 3),
sep="", collapse=" ")
} else {s[i] <- paste(toupper(substring(s[i], 1,1)), substring(s[i], 2), sep="", collapse=" ")}
} else { next(i) }
}
return(paste(s, sep="", collapse=" "))
}
EstandarFOR(try)
EstandarFOR <- function(x) {
s <- strsplit(x, " ")[[1]]
for (i in 1:length(s)) {
if (s[i] != "and") {
ss <- strsplit(s[i], "")[[1]]
if (ss[i][1] == "(") {
s[i] <- paste(toupper(substring(s[i],2,2)), substring(s[i], 3),
sep="", collapse=" ")
} else {s[i] <- paste(toupper(substring(s[i], 1,1)), substring(s[i], 2), sep="", collapse=" ")}
} else { next(i) }
}
return(paste(s, sep="", collapse=" "))
}
EstandarFOR(try)
s <- strsplit(try, " ")[[1]]
s <- strsplit(try, " ")[[1]]
s
ss <- strsplit(s[1], "")
ss
ss <- strsplit(s[1], "")[[1]]
ss
ss[1]
EstandarFOR <- function(x) {
s <- strsplit(x, " ")[[1]]
for (i in 1:length(s)) {
if (s[i] != "and") {
ss <- strsplit(s[i], "")[[1]]
if (ss[1] == "(") {
s[i] <- paste(toupper(substring(s[i],2,2)), substring(s[i], 3),
sep="", collapse=" ")
} else {s[i] <- paste(toupper(substring(s[i], 1,1)), substring(s[i], 2), sep="", collapse=" ")}
} else { next(i) }
}
return(paste(s, sep="", collapse=" "))
}
EstandarFOR(try)
ss[1]
ss[2]
s <- strsplit(try, " ")[[1]]
s
ss <- strsplit(s[1], "")[[1]]
ss[2]
ss
ss <- strsplit(s[2], "")[[1]]
ss
ss[1]
s[2] <- paste(toupper(substring(s[2],2,2)), substring(s[2], 3),
sep="", collapse=" ")
s[2]
s[2] <- paste(substring(s[2],1,1),toupper(substring(s[2],2,2)), substring(s[2], 3),
sep="", collapse=" ")
s[2]
s <- strsplit(try, " ")[[1]]
s
ss <- strsplit(s[2], "")[[1]]
ss
ss[1]
s[2] <- paste(substring(s[2],1,1),toupper(substring(s[2],2,2)), substring(s[2], 3),
sep="", collapse=" ")
s[2]
EstandarFOR <- function(x) {
s <- strsplit(x, " ")[[1]]
for (i in 1:length(s)) {
if (s[i] != "and") {
ss <- strsplit(s[i], "")[[1]]
if (ss[1] == "(") {
s[i] <- paste(substring(s[i],1,1), toupper(substring(s[i],2,2)), substring(s[i], 3),
sep="", collapse=" ")
} else {s[i] <- paste(toupper(substring(s[i], 1,1)), substring(s[i], 2), sep="", collapse=" ")}
} else { next(i) }
}
return(paste(s, sep="", collapse=" "))
}
EstandarFOR(try)
try <- c("hola and adios (loquidios)")
strsplit(s[2], "")[[1]][1]
EstandarFOR(try)
data$Country
data$Country
data$Country
data$Country <- trimws(data$Country)
data$Country
str(data$Country)
data$Country <- sapply(data$Country, EstandarFOR)
data$Country
data$Country <- as.factor(data$Country)
str(data)
#Ejercicio 1
data <- read.csv("2016_raw.csv")
#Ejercicio 2
short.variables <- function(input1, ...){
for (i in 1:length(input1)){
if (!grepl("\\.", (input1)[i])) {
next }
else {
separate.words <- strsplit(input1[i], "\\.")
number.of.words <- length(separate.words[[1]])
mystring <- c()
for (jj in 1:number.of.words){
myletter <- substr(separate.words[[1]][jj], 1,1)
mystring <- c(mystring, myletter)
}
input1[i] <- paste(mystring, collapse = "")
}
}
return(input1)
}
long_names <- names(data)
short_names <- short.variables(long_names)
names(data) <- short_names
#Ejercicio 3
sapply(mydata, class)
cco <- "Categorica-cualitativa-ordinal"
ccn <- "Categorica-cualitativa-nominal"
cnd <- "Cuantitativa Discreta"
cnc <- "Cuantitativa Continua"
mis_categorias <- c(ccn, ccn, cco, cnc, cnc, cnc, cnc, cnc, cnc, cnc, cnc, cnc, cnc)
mydf <- as.data.frame(setNames(mis_categorias, names(data)))
mydf
#Ejercicio 4
#Se observa que las  variable HS, GpC debería ser numérica pero está definida como factor
data$HS <- as.character(data$HS)
data$HS <- data$HS <- gsub(",", ".", data$HS)
data$HS <- as.numeric(data$HS)
data$GpC <- as.character(data$GpC)
data$GpC <- data$GpC <- gsub(",", ".", data$GpC)
data$GpC <- as.numeric(data$GpC)
#Se observa que la variable HR debería ser un factor pero está definida como integer.
data$HR <- as.ordered(data$HR)
#Ejercicio 5
#Comprobamos si en las variables cuantitativas (eso es , desde la columna 4 hasta la ultima hay alguna coma)
comprobacion <- lapply(data[4:ncol(data)], function(x) any(grepl(",", x)))
#No hay más separadores decimales erroneos. Los únicos que había ya fueron corregidos al transformar la clase de la variable HR.
#Ejercicio 6. Normalizar variables cualitativas
EstandarFOR <- function(x) {
s <- strsplit(x, " ")[[1]]
for (i in 1:length(s)) {
if (s[i] != "and") {
ss <- strsplit(s[i], "")[[1]]
if (ss[1] == "(") {
s[i] <- paste(substring(s[i],1,1), toupper(substring(s[i],2,2)), substring(s[i], 3),
sep="", collapse=" ")
} else {s[i] <- paste(toupper(substring(s[i], 1,1)), substring(s[i], 2), sep="", collapse=" ")}
} else { next(i) }
}
return(paste(s, sep="", collapse=" "))
}
data$Country
data$Country <- trimws(data$Country)
data$Country <- sapply(data$Country, EstandarFOR)
data$Country <- as.factor(data$Country)
#data[4:ncol(data)] <- lapply(data[4:ncol(data)], function (x) ((x-mean(x, na.rm = TRUE))/sd(x, na.rm = TRUE)))
# Ejercicio 7
a <- which(data$LCI > data$UCI)
fromLCItoUCI <- data$LCI[a]
fromUCItoLCI <- data$UCI[a]
data$LCI[a] <- fromUCItoLCI
data$UCI[a] <- fromLCItoUCI
which(data$LCI > data$UCI)
data$HR <- order(data$HS, decreasing = TRUE)
# Ejercicio 8
# Buscar valores atípicos en las variables cuantitativas
# i. Presentar un boxplot para cada variable cuantitativa.
# ii. Realizar un cuadro con las estimaciones robustas y no robustas de tendencia central y dispersión
# de cada variable cuantitativa.
boxplot(data[4:ncol(data)])
names(data)
# Ejercicio 9
library(VIM)
which(is.na(data$Family))
data$Family <- kNN(data$Family)
which(is.na(data$Family))
mydata.completo <- kNN(mydata)
#Ejercicio 1
data <- read.csv("2016_raw.csv")
#Ejercicio 2
short.variables <- function(input1, ...){
for (i in 1:length(input1)){
if (!grepl("\\.", (input1)[i])) {
next }
else {
separate.words <- strsplit(input1[i], "\\.")
number.of.words <- length(separate.words[[1]])
mystring <- c()
for (jj in 1:number.of.words){
myletter <- substr(separate.words[[1]][jj], 1,1)
mystring <- c(mystring, myletter)
}
input1[i] <- paste(mystring, collapse = "")
}
}
return(input1)
}
long_names <- names(data)
short_names <- short.variables(long_names)
names(data) <- short_names
#Ejercicio 3
sapply(mydata, class)
cco <- "Categorica-cualitativa-ordinal"
ccn <- "Categorica-cualitativa-nominal"
cnd <- "Cuantitativa Discreta"
cnc <- "Cuantitativa Continua"
mis_categorias <- c(ccn, ccn, cco, cnc, cnc, cnc, cnc, cnc, cnc, cnc, cnc, cnc, cnc)
mydf <- as.data.frame(setNames(mis_categorias, names(data)))
mydf
#Ejercicio 4
#Se observa que las  variable HS, GpC debería ser numérica pero está definida como factor
data$HS <- as.character(data$HS)
data$HS <- data$HS <- gsub(",", ".", data$HS)
data$HS <- as.numeric(data$HS)
data$GpC <- as.character(data$GpC)
data$GpC <- data$GpC <- gsub(",", ".", data$GpC)
data$GpC <- as.numeric(data$GpC)
#Se observa que la variable HR debería ser un factor pero está definida como integer.
data$HR <- as.ordered(data$HR)
#Ejercicio 5
#Comprobamos si en las variables cuantitativas (eso es , desde la columna 4 hasta la ultima hay alguna coma)
comprobacion <- lapply(data[4:ncol(data)], function(x) any(grepl(",", x)))
#No hay más separadores decimales erroneos. Los únicos que había ya fueron corregidos al transformar la clase de la variable HR.
#Ejercicio 6. Normalizar variables cualitativas
EstandarFOR <- function(x) {
s <- strsplit(x, " ")[[1]]
for (i in 1:length(s)) {
if (s[i] != "and") {
ss <- strsplit(s[i], "")[[1]]
if (ss[1] == "(") {
s[i] <- paste(substring(s[i],1,1), toupper(substring(s[i],2,2)), substring(s[i], 3),
sep="", collapse=" ")
} else {s[i] <- paste(toupper(substring(s[i], 1,1)), substring(s[i], 2), sep="", collapse=" ")}
} else { next(i) }
}
return(paste(s, sep="", collapse=" "))
}
data$Country
data$Country <- trimws(data$Country)
data$Country <- sapply(data$Country, EstandarFOR)
data$Country <- as.factor(data$Country)
#data[4:ncol(data)] <- lapply(data[4:ncol(data)], function (x) ((x-mean(x, na.rm = TRUE))/sd(x, na.rm = TRUE)))
# Ejercicio 7
a <- which(data$LCI > data$UCI)
fromLCItoUCI <- data$LCI[a]
fromUCItoLCI <- data$UCI[a]
data$LCI[a] <- fromUCItoLCI
data$UCI[a] <- fromLCItoUCI
which(data$LCI > data$UCI)
data$HR <- order(data$HS, decreasing = TRUE)
# Ejercicio 8
# Buscar valores atípicos en las variables cuantitativas
# i. Presentar un boxplot para cada variable cuantitativa.
# ii. Realizar un cuadro con las estimaciones robustas y no robustas de tendencia central y dispersión
# de cada variable cuantitativa.
boxplot(data[4:ncol(data)])
names(data)
# Ejercicio 9
# library(VIM)
# which(is.na(data$Family))
# data$Family <- kNN(data$Family)
# which(is.na(data$Family))
#
# mydata.completo <- kNN(mydata)
View(data)
comprobacion <- lapply(data[4:ncol(data)], function(x) any(grepl(",", x)))
comprobacion
knitr::opts_chunk$set(echo = TRUE)
head(data$Country)
write.csv("2016_preprocessed.csv", C:\Users\Alvaro\Desktop\UOC_Estadistica\Practica 1)
write.csv(data, file = "2016_preprocessed.csv")
boxplot(data[4:ncol(data)])
par( mfrow=c(1,3))
boxplot(data[4:7)])
par( mfrow=c(1,3))
boxplot(data[,4:7])
boxplot(data[,4:6])
boxplot(data[,4:6])
boxplot(data$HS)
par( mfrow=c(1,1))
boxplot(data$HS)
boxplot(data[,4:6])
boxplot(data[,7:ncol(data)])
boxplot(data[,7:9])
boxplot(data[,10:12])
boxplot(data[,13:ncol(Data)])
boxplot(data[,13:ncol(data)])
names(data)
boxplot(data[,4:6])
boxplot(data[,7:9])
boxplot(data[,10:12])
boxplot(data[,7:9,13])
boxplot(data[,c(7:9,13)])
install.packages("psych")
medidasROBUSTAS <- function(X,...) {
myvalues <- c(mean(x), median(x), mean(x, trim=), winsor.mean(x, trim=), sd(x), IQR(x),  mad(x))
}
sapply(data[,4:ncol(data)], medidasROBUSTAS)
sapply(data$HS, medidasROBUSTAS)
medidasROBUSTAS(data$HS)
mean(data$HS)
medidasROBUSTAS <- function(X) {
myvalues <- c(mean(x), median(x), mean(x, trim=), winsor.mean(x, trim=), sd(x), IQR(x),  mad(x))
}
medidasROBUSTAS(data$HS)
medidasROBUSTAS <- function(x) {
myvalues <- c(mean(x), median(x), mean(x, trim=), winsor.mean(x, trim=), sd(x), IQR(x),  mad(x))
}
medidasROBUSTAS(data$HS)
library(psych)
medidasROBUSTAS <- function(x) {
myvalues <- c(mean(x), median(x), mean(x, trim=), winsor.mean(x, trim=), sd(x), IQR(x),  mad(x))
}
medidasROBUSTAS(data$HS)
myvalues
medidasROBUSTAS <- function(x) {
myvalues <- c(mean(x), median(x), mean(x, trim=), winsor.mean(x, trim=), sd(x), IQR(x),  mad(x))
return myvalues
}
medidasROBUSTAS <- function(x) {
myvalues <- c(mean(x), median(x), mean(x, trim=), winsor.mean(x, trim=), sd(x), IQR(x),  mad(x))
return(myvalues)
}
medidasROBUSTAS(data$HS)
variables <- names(data)[4;length(names(data))]
variables <- names(data)[4:length(names(data))]
variables
mytable <- tapply(data[,4:ncol(data)],medidasROBUSTAS)
mytable <- spply(data[,4:ncol(data)],medidasROBUSTAS)
mytable <- sapply(data[,4:ncol(data)],medidasROBUSTAS)
medidasROBUSTAS <- function(x) {
myvalues <- c(mean(x, na.rm = TRUE), median(x, na.rm = TRUE), mean(x, na.rm = TRUE, trim=), winsor.mean(x, na.rm = TRUE, trim=), sd(x, na.rm = TRUE), IQR(x, na.rm = TRUE),  mad(x, na.rm = TRUE))
return(myvalues)
}
variables <- names(data)[4:length(names(data))]
variables
medidasROBUSTAS(data$HS)
mytable <- sapply(data[,4:ncol(data)],medidasROBUSTAS)
mytable
mytable <- round(sapply(data[,4:ncol(data)],medidasROBUSTAS),3)
mytable
str(mytable)
medidas <- c("Mean", "Median", "Media Recortada", "Media winsorizada", "Desviacion estandar", "Rango Intercuartilico (PIC)", "Desviación absoluta DAM")
dimnames(mytable)
dimnames(mytable)[[1]]
dimnames(mytable)[[1]] <- medidas
medidasROBUSTAS(data$HS)
mytables
mytable
colnames(data)[colSums(is.na(data)) > 0]
rowSums(is.na(data)) > 0
which(rowSums(is.na(data)) > 0)
mycolswNA
mycolswNA <-  colnames(data)[colSums(is.na(data)) > 0]
myrowswNA <-   which(rowSums(is.na(data)) > 0)
mycolswNA
print("En las columnas %s hay Valores perdidas. En las filas %s hay valores perdidos", mycolswNA, myrowswNA)
sprintf("En las columnas \d hay Valores perdidas. En las filas %s hay valores perdidos", mycolswNA, myrowswNA)
sprintf("En las columnas %s hay Valores perdidas. En las filas %s hay valores perdidos", mycolswNA, myrowswNA)
sprintf("En la columna/columnas - %s - hay Valores perdidas. En las fila/filas - %s - hay valores perdidos", mycolswNA, myrowswNA)
sprintf("En la columna/columnas - %s - hay Valores perdidos. En las fila/filas - %s - hay valores perdidos", mycolswNA, myrowswNA)
library(VIM)
which(is.na(data$Family))
data$Family <- kNN(data$Family)
mydata.completo <- kNN(mydata, data$Family)
mydata.completo <- kNN(data, data$Family)
mydata.completo <- kNN(data, data$Family)
mydata.completo <- kNN(data[,4:ncol(data)], data$Family)
mydata.completo <- kNN(data[,4:ncol(data)], data$Family)
mydata.completo <- kNN(data[,4:ncol(data)], data$Family, metric = NULL, k = 6)
library(caret)
View(data)
datafillinNA <- data[,7:ncol(data)]
mydata.completo <- kNN(datafillinNA, datafillNA[,2], metric = NULL, k = 6)
mydata.completo <- kNN(datafillinNA, datafillinNA[,2], metric = NULL, k = 6)
str(datafillinNA)
View(data)
short.variables(ejemplo1)
ejemplo1 <- c("Mi.Ejemplo.Mas.Guay")
ejemplo2 <- c("Hola.Caracola")
short.variables(ejemplo1)
ejemplo4 = c("adios")
ejemplo1 <- c("hola caracola")
ejemplo2 <- c("hola and caracola")
ejemplo3 <- c("hola (fichichi)")
ejemplo4 = c("adios")
EstandarFOR(ejemplo1)
EstandarFOR(ejemplo2)
s <- strsplit(ejemplo1)
s <- strsplit(ejemplo1," ")[[1]]
s
s <- strsplit(ejemplo1," ")
s
s <- strsplit(ejemplo1," ")[[1]]
s
s[1][1]
s[1][1][1]
library(dplyr)
continent <- data %>%
group_by(Region) %>%
summarize(AvrageHS <- mean(HS))
str(continent)
View(continent)
str(data)
data$Region <- trimws(data$Region)
levels(data$Region)
ata$Region
data$Region <- as.factor(data$Region)
levels(data$Region)
continent <- data %>%
group_by(Region) %>%
summarize(AvrageHS <- mean(HS))
str(continent)
View(continent)
data$Region <- as.factor(data$Region)
levels(data$Region)
data[1,]
level(data$Region[1])
(data$Region[1])
gsub("SUB-SAHARAN  AFRCA", "SUB-SAHARAN AFRICA", data$Region)
which(data$Region == "SUB-SAHARAN  AFRCA")
data$Region <- gsub("SUB-SAHARAN  AFRCA", "SUB-SAHARAN AFRICA", data$Region)
which(data$Region == "SUB-SAHARAN  AFRCA")
which(data$Region == "MIDDLE EAST AND NORTHERN AFRCA")
which(data$Region == "MIDDLE EAST AND NORTHERN  AFRCA")
data$Region <- gsub("MIDDLE EAST AND NORTHERN  AFRCA", "MIDDLE EAST AND NORTHERN AFRICA", data$Region)
which(data$Region == "MIDDLE EAST AND NORTHERN  AFRCA")
levels(data$Region)
str(Data)
str(data)
data$Region <- as.factor(data$Region)
levels(data$Region)
continent <- data %>%
group_by(Region) %>%
summarize(AvrageHS <- mean(HS))
str(continent)
View(continent)
View(order(continent),2)
continent <- as.ordered(continent[,2])
continent[,2]
continent[,2] <- as.ordered(continent[,2])
continent$`AvrageHS <- mean(HS)` <- as.ordered(continent$`AvrageHS <- mean(HS)`)
View(continent)
continent$`AvrageHS <- mean(HS)` <- as.ordered(continent$`AvrageHS <- mean(HS)`)
View(continent)
arrange(continent,)
arrange(continent, 2)
continent$`AvrageHS <- mean(HS)` <- as.numeric(continent$`AvrageHS <- mean(HS)`)
arrange(continent, continent[,2])
continent <- order(continent[,2], decreasing = TRUE)
continent[,2] <- order(continent[,2], decreasing = TRUE)
continent[,2]
continent <- data %>%
group_by(Region) %>%
summarize(AvrageHS <- mean(HS))
continent[,2] <- order(continent[,2], decreasing = TRUE)
continent[,2]
order(continent[,2], decreasing = TRUE)
continent$`AvrageHS <- mean(HS)` <- as.numeric(continent$`AvrageHS <- mean(HS)`)
continent[,2]
continent[,2] <-
order(continent[,2], decreasing = TRUE)
continent[,2] <-
order(continent$`AvrageHS <- mean(HS)`, decreasing = TRUE)
order(continent$`AvrageHS <- mean(HS)`, decreasing = TRUE)
continent <- data %>%
group_by(Region) %>%
summarize(AvrageHS <- mean(HS))
order(continent$`AvrageHS <- mean(HS)`, decreasing = TRUE)
continent <- data %>%
group_by(Region) %>%
summarize(AvrageHS <- mean(HS))
continent <- data %>%
group_by(Region) %>%
summarize(AvrageHS = mean(HS))
str(ccontinent)
str(continent)
continent <- as.data.frame(continent)
str(continent)
order(continent$AverageHS, decreasing = TRUE)
continent$AverageHS
continent <- data %>%
group_by(Region) %>%
summarize(AverageHS = mean(HS))
continent <- as.data.frame(continent)
str(continent)
order(continent$AverageHS, decreasing = TRUE)
continent$Region <- order(continent$AverageHS, decreasing = TRUE)
str(continent)
continent <- data %>%
group_by(Region) %>%
summarize(AverageHS = mean(HS))
continent <- as.data.frame(continent)
continent$Ordenados <- order(continent$AverageHS, decreasing = TRUE)
View(continent)
arrange(continent)
arrange(continent,3)
arrange(continent, continent$Ordenados)
arrange(continent, continent$AverageHS)
arrange(continent, continent$AverageHS, decreasing = FALSE)
arrange(continent, continent$AverageHS, desc())
arrange(continent, desc(continent$AverageHS))
